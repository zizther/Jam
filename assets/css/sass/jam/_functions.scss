//============================================================
//
// px to em
//
// Converts pixel size to em
//
// Parameters:
// @param [float] $pxval: The px value
// @param [float] $base: Base font size. (This can be left)
//
//============================================================
@function px-to-em($pxval, $base: $base-pixel-size) {
    @return ($pxval / $base) * 1em;
}


//============================================================
//
// Strip unit
//
// Strips the unit from the given value
//
// Parameters:
// @param [value] $value: A value with unit (px, em, %, etc)
// @return [value] value without the unit
//
// Usage:
// $length: 42em;
// $int: strip-unit($length); // 42
//
//============================================================
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}


//============================================================
//
// Clamp a number
//
// Restricting a number between a min and max range
//
// Parameters:
// @param [value] $value: The value to be evaluated
// @param [value] $min: The min range value
// @param [value] $max: The max range value
// @return [value] value
//
// 4 clamped to 1-3 equals 3
// -5 clamped to 1-10 equals 1
// 42 clamped to 10-100 equals 42
//
// Usage:
// $pc: percentage(clamp($value, 0, 100));
// $darkColor: darken($color, $pc);
//
//============================================================
@function clamp($value, $min, $max) {
    @return if($value > $max, $max, if($value < $min, $min, $value));
}


//============================================================
//
// Tint
//
// Slightly lighten a color
//
// @param [Color] $color - color to tint
// @param [Number] $percentage - percentage of '$color' in the returned color
// @return [Color]
//
// Usage:
// color: tint(#bada55, 42%); // color: #e2efb7;
//
//============================================================
@function tint($color, $percentage) {
    @return mix($color, white, $percentage);
}


//============================================================
//
// Shade
//
// Slightly darken a color
//
// @param [Color] $color - color to shade
// @param [Number] $percentage - percentage of '$color' in the returned color
// @return [Color]
//
// Usage:
// background-color: shade(#663399, 42%); // background-color: #2a1540;
//
//============================================================
@function shade($color, $percentage) {
    @return mix($color, black, $percentage);
}


//============================================================
//
// Color luminance
//
// Calculates the luminance of a color
//
// Returns the luminance of '$colour' as a float (between 0 and 1)
// 1 is pure white, 0 is pure black
// @param [Color] $color - Any colour value
// @return [Number]
// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
//
// Usage:
// $color: #bada55;
// $luminance: luminance($color); // 0.6123778773 
//
//============================================================
@function luminance($color) {
    $colors: (
        'red': red($color),
        'green': green($color),
        'blue': blue($color)
    );

    @each $name, $value in $colors {
        $adjusted: 0;
        $value: $value / 255;

        @if $value < 0.03928 {
            $value: $value / 12.92;
        }
        @else {
            $value: ($value + .055) / 1.055;
            $value: pow($value, 2.4);
        }
    
        $colors: map-merge($colors, ($name: $value));
    }

    @return (map-get($colors, 'red') * .2126) + (map-get($colors, 'green') * .7152) + (map-get($colors, 'blue') * .0722);
}