/* -------------------------------------------------------------- 
	Grid
	* Set the width of the cells using the function grid-span, using the column span as parameter. You probably want this inside Media Queries if you use a mobile first approach.
	* Optional mixins grid-push, grid-pull, grid-prepend and grid-append. Push and pull need position: relative on the element to work.
	* Opera may still have an issue with the font-size being 0, a fix is to chnage it to 0.5px. You can use JS to detect Opera
	* This will not work in IE7 or lower
	
	-- Usage:
	<div class="grid">
		<div class="col span_1">...</div>
		<div class="col span_2">...</div>
		<div class="col span_3">...</div>
	</div>
	
	.grid {
	    @extend %grid;
	}
	.col {
	    @extend %grid-cell;
	    width: grid-span(4);
	}
	
	
	-- To swap column 1 and column 2:
	.col-1 {
		@include grid-push(4);
	    position: relative;
	}
	.col-2 {
		@include grid-pull(4);
	    position: relative;
	}
	
-------------------------------------------------------------- */
@function grid-span($cols, $total: $columns) {
    @return ($column-width * $cols  + $gutter-width * ($cols  - 1)) /
          ($column-width * $total + $gutter-width * ($total - 1)) * 100%;
}

@function grid-xt($cols, $total: $columns) {
    @return ($column-width + $gutter-width) * $cols /
          ($column-width * $total + $gutter-width * ($total - 1)) * 100%;
}

@mixin grid-push($cols, $total: $columns) {
    left: grid-xt($cols, $total);
}

@mixin grid-pull($cols, $total: $columns) {
    left: grid-xt(-$cols, $total);
}

@mixin grid-prepend($cols, $total: $columns) {
    margin-left: grid-xt($cols, $total);
}

@mixin grid-append($cols, $total: $columns) {
    margin-right: grid-xt($cols, $total);
}


$columns: 12 !default;
$column-width: 4em !default;
$gutter-width: 2.5em !default;

%grid {
	font-size: 0 !important;
    text-align: justify !important;
    text-justify: distribute-all-lines; // IE fix
    
    & > * {
    	font-size: medium;
    	text-align: left;
    }
    &:after {
    	content: '';
    	display: inline-block;
    	width: 100%;
    }
}

%grid-cell {
	display: inline-block;
	vertical-align: top;
	width: 100%;
}

/*** Grid ***/
.grid {
    @extend %grid;
}
.col {
    @extend %grid-cell;
    width: grid-span(4);

	&.span_1 {
    	width: grid-span(1);
    }
    &.span_2 {
    	width: grid-span(2);
    }
    &.span_3 {
    	width: grid-span(3);
    }
    &.span_4 {
    	width: grid-span(4);
    }
    &.span_5 {
    	width: grid-span(5);
    }
    &.span_6 {
    	width: grid-span(6);
    }
    &.span_7 {
    	width: grid-span(7);
    }
    &.span_8 {
    	width: grid-span(8);
    }
    &.span_9 {
    	width: grid-span(9);
    }
    &.span_10 {
    	width: grid-span(10);
    }
    &.span_11 {
    	width: grid-span(11);
    }
    &.span_12 {
    	width: grid-span(12);
    }
}// END .col


.grid_yui {
    letter-spacing: -0.31em; // Webkit: collapse white-space between units
    *letter-spacing: normal; // Reset IE < 8
    *word-spacing: -0.43em; // IE < 8: collapse white-space between units
    
    text-align: justify !important;
    text-justify: distribute-all-lines; // IE fix
    
    text-rendering: optimizespeed; // Webkit: fixes text-rendering: optimizeLegibility
    
    /*
	    Sets the font stack to fonts known to work properly with the above letter
	    and word spacings. See: https://github.com/yui/pure/issues/41/
	
	    The following font stack makes Pure Grids work on all known environments.
	
	    * FreeSans: Ships with many Linux distros, including Ubuntu
	
	    * Arimo: Ships with Chrome OS. Arimo has to be defined before Helvetica and
	      Arial to get picked up by the browser, even though neither is available
	      in Chrome OS.
	
	    * Droid Sans: Ships with all versions of Android.
	
	    * Helvetica, Arial, sans-serif: Common font stack on OS X and Windows.
    */
    
    //font-family: FreeSans, Arimo, "Droid Sans", Helvetica, Arial, sans-serif;
    
    /*
	    Use flexbox when possible to avoid `letter-spacing` side-effects.
	
	    NOTE: Firefox (as of 25) does not currently support flex-wrap, so the
	    `-moz-` prefix version is omitted.
    */
    display: -webkit-flex;
    -webkit-flex-flow: row wrap;
    /* IE10 uses display: flexbox */
    display: -ms-flexbox;
    -ms-flex-flow: row wrap;
}

/*
	Opera as of 12 on Windows needs word-spacing.
	The ".opera-only" selector is used to prevent actual prefocus styling and is not required in markup.
*/
.opera-only :-o-prefocus,
.grid_yui {
    word-spacing: -0.43em;
}

.col_yui {
    display: inline-block;
    letter-spacing: normal;
    text-rendering: auto;
    vertical-align: top;
    width: grid-span(4);
    word-spacing: normal;

	&.span_1 {
    	width: grid-span(1);
    }
    &.span_2 {
    	width: grid-span(2);
    }
    &.span_3 {
    	width: grid-span(3);
    }
    &.span_4 {
    	width: grid-span(4);
    }
    &.span_5 {
    	width: grid-span(5);
    }
    &.span_6 {
    	width: grid-span(6);
    }
    &.span_7 {
    	width: grid-span(7);
    }
    &.span_8 {
    	width: grid-span(8);
    }
    &.span_9 {
    	width: grid-span(9);
    }
    &.span_10 {
    	width: grid-span(10);
    }
    &.span_11 {
    	width: grid-span(11);
    }
    &.span_12 {
    	width: grid-span(12);
    }
}