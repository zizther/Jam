/* -------------------------------------------------------------- 
	SASS Mixins
-------------------------------------------------------------- */
//============================================================
//
// Opacity - With IE8 fallback
//
// Paramters:
// @param [float] $opacity: 0 - 1
//
//============================================================
@mixin opacity($opacity){
    @if $opacity == 1 {
        filter: unquote("progid:DXImageTransform.Microsoft.Alpha(enabled=false)");
    }
    @else {
        filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
    }
    opacity: $opacity;
}


//============================================================
//
// Clearfix
// Adapted from: A new micro clearfix hack
//
//============================================================
@mixin clearfix {
    & {
        *zoom: 1;
    }
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}


//============================================================
//
// HIDPI-media-query 
//
// The HIDPI Meda Query will allow you to generate a media
// query that targets HIDPI devices.
// Find your device pixel ratio. Check out http://bjango.com/articles/min-device-pixel-ratio/
//
// Parameters:
// @param [float] $ratio: The device screen ratio (Default value set to 2. Be aware some devices are 1.3)
//
//============================================================
@mixin hidpi($ratio: 2) {
	@media only screen and (-webkit-min-device-pixel-ratio: $ratio),
    only screen and (min--moz-device-pixel-ratio: $ratio),
    only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
    only screen and (min-resolution: #{round($ratio*96)}dpi),
    only screen and (min-resolution: #{$ratio}dppx) {
    	@content;
	}
}


//============================================================
//
// Retina image
//
// The mixin uses a @2x.png retina filename.
// E.g. logo.png and logo@2x.png
//
// Parameters:
// @param [string] $filepath: The path to the file without the file extension. (Place this in quotes "")
// @param [string] $width: The width of the image (include px)
// @param [string] $height: The height of the image (include px)
// @param [string] $extension: The extension type of the image. (The default is png. Don't include the '.')
//
//============================================================
@mixin retina-image($filepath, $width, $height, $extension: png) {
	background-image: url($filepath + '.' + $extension);
	background-repeat: no-repeat;
	height: $height;
	width: $width;
	
	@media only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and (-moz-min-device-pixel-ratio: 2),
	only screen and (-o-min-device-pixel-ratio: 2/1),
	only screen and (min-device-pixel-ratio: 2),
	only screen and (min-resolution: 192dpi),
	only screen and (min-resolution: 2dppx) {
		& {
			background-image: url($filepath + '@2x.' + $extension);
			background-size: $width $height;	
		}
	}
}


//============================================================
//
// Image Sprite
//
// Usage:
// 1. Create two folders in the graphics directory (for example 'icons' and 'icons-2x').
// 2. Create sprite images for pixel ratio 1 screens and put them in the first folder.
// 3. Create sprite images for pixel ratio 2 screens and put them in the second folder named with '-2x', use the same filenames (without '@2x' or '-2x').
//
// Parameters:
// @param [string] $image: File name of the image (Place this in quotes "")
// @param [string] $sprite-map: Variable for the pixel ratio 1 sprite
// @param [string] $sprite-map-2x: Variable for the pixel ratio 2 sprite (optional)
//
// Example:
// $icons: sprite-map("icons/*.png", $layout: smart);
// $icons-2x: sprite-map("icons-2x/*.png", $layout: smart);
//
// .icon_1 {
//     @include image-sprite('icon_1', $icons, $icons-2x);
// }
//
//
//============================================================
@mixin image-sprite($image, $sprite-map, $sprite-map-2x: null) {
    background-image: sprite-url($sprite-map);
    background-position: sprite-position($sprite-map, $image);
    background-repeat: no-repeat;
    display: block;
    height: image-height(sprite-file($sprite-map, $image));
    overflow: hidden;
    width: image-width(sprite-file($sprite-map, $image));

    @if $sprite-map-2x {
        @media only screen and (-webkit-min-device-pixel-ratio: 2),
        	only screen and (-moz-min-device-pixel-ratio: 2),
        	only screen and (-o-min-device-pixel-ratio: 2/1),
        	only screen and (min-device-pixel-ratio: 2),
        	only screen and (min-resolution: 192dpi),
        	only screen and (min-resolution: 2dppx) {
                background-image: sprite-url($sprite-map-2x);
                background-position: round(nth(sprite-position($sprite-map-2x, $image), 1) / 2) round(nth(sprite-position($sprite-map-2x, $image), 2) / 2);
                background-size: (image-width(sprite-path($sprite-map-2x)) / 2) (image-height(sprite-path($sprite-map-2x)) / 2);
                height: image-height(sprite-file($sprite-map-2x, $image)) / 2;
                width: image-width(sprite-file($sprite-map-2x, $image)) / 2;
        }
    }
}


//============================================================
//
// SVG Image
//
// The mixin uses a @2x.png retina filename.
// This mixin depends on Modernizr to test for svg to fallback to images if SVG is not supported
// E.g. logo.svg, logo.png and logo@2x.png
//
// Parameters:
// @param [string] $filepath: The path to the file without the file extension. (Place this in quotes "")
// @param [string] $width: The width of the image (include px)
// @param [string] $height: The height of the image (include px)
// @param [string] $fallback-extension: The extension type of the image. (The default is png. Don't include the '.')
//
//============================================================
@mixin svg-image($filepath, $width, $height, $fallback-extension: png){
    background-image: url($filepath + '.svg');
    background-size: $width $height;
    
    .no-svg & {
        background-image: url($filepath + '.' + $fallback-extension);

        @media only screen and (-webkit-min-device-pixel-ratio: 2),
    	only screen and (-moz-min-device-pixel-ratio: 2),
    	only screen and (-o-min-device-pixel-ratio: 2/1),
    	only screen and (min-device-pixel-ratio: 2),
    	only screen and (min-resolution: 192dpi),
    	only screen and (min-resolution: 2dppx) {
    		& {
    			background-image: url($filepath + '@2x.' + $fallback-extension);	
    		}
    	}
    }
}


//============================================================
//
// Aspect ratio
//
// The mixin maintains an elements aspect ratio.
// The mixin assumes you will be nesting an element with the class '.aspect-frame' inside your initial block.
//
// Parameters:
// @param [int] $width: The ratio width
// @param [int] $height: The ratio height
//
//============================================================
@mixin aspect-ratio($width, $height) {
    position: relative;
    
    &:before {
        content: "";
        display: block;
        padding-top: ($height / $width) * 100%;
        width: 100%;
    }
    > .aspect-frame {
        @include absolute(top 0 right 0 bottom 0 left 0);
    }
}


//============================================================
//
// Responsive image
//
// Keep images from scaling beyond the width of their parents.
//
// Parameters:
// @param [string] $display: Display type (Default is block)
//
//============================================================
@mixin img-responsive($display: block) {
    display: $display;
    height: auto; // Scale the height according to the width, otherwise you get stretching
    max-width: 100%; // Set a maximum relative to the parent
}


//============================================================
//
// Font size
//
// Adds in px and rem sizes
// Note: Keep rem after px on output so that the px unit size acts as a fallback
//
// Parameters:
// @param [string] $size: The rem font size (This is the px font size divided by 10 - e.g. 16px will be 1.6)
//
//============================================================
@mixin font-size($size: 1.6) {
    font-size: ($size * 10) + px;
    font-size: $size + rem;
}


//============================================================
//
// Center-align a block level element
//
//============================================================
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}


//============================================================
//
// Size shortcut
// A helper mixin to output the width and height
//
// Parameters:
// @param [string] $width: Width (Include unit - px, em, rem)
// @param [string] $height: Height (Include unit - px, em, rem) (Optional)
//
//============================================================
@mixin size($width, $height: null) {
    @if $height {
        height: $height;
        width: $width;
    }
    @else {
        height: $width;
        width: $width;
    }
}


//============================================================
//
// Position
// A helper mixin for offset positioning
//
// Parameters:
// @param [string] $position: position
// @param [list] $args (()): offsets list
// ---
// Explanations
// 1. Output position
// 2. If `$args` is not empty
// 3. Loop other the 4 popular offsets (`$offsets`)
// 4. Check if the current one exists in `$args`
// 5. If it is found in `$args`
// 6. And if it is at last position
// 7. Set it to 0
// 8. Else if it is found at any other index
// 9. Store the next value from `$args`
// 10. If it is a valid length
// 11. Set the offset to this value
// 12. Else if it is another offset
// 13. Set the offset to 0
// 14. Else
// 15. Warn the user
//
//============================================================
@mixin position($position, $args: ()) {
    $offsets: top right bottom left;
    position: $position;
  
    @each $offset in $offsets {
        $index: index($args, $offset);
    
        @if $index {
            @if $index == length($args) {
                #{$offset}: 0;
            }
            @else {
                $next: nth($args, $index + 1);
                @if is-valid-length($next) {
                    #{$offset}: $next;
                }
                @else if index($offsets, $next) {
                    #{$offset}: 0;
                }
                @else {
                    @warn "Invalid value `#{$next}` for offset `#{$offset}`.";
                }
            }
        }
    }
}


// Function checking if $value is a valid length
//
// @param [literal] $value: value to test
//
// @return [bool]
//
@function is-valid-length($value) {
    @return (type-of($value) == "number" and not unitless($value)) or (index(auto initial inherit 0, $value) != false);
}

// Shorthands
//
// @param [list] $args (()): offsets list
//
@mixin absolute($args: ()) {
    @include position(absolute, $args);
}
 
@mixin fixed($args: ()) {
    @include position(fixed, $args);
}
 
@mixin relative($args: ()) {
    @include position(relative, $args);
}


//============================================================
//
// Text overflow
//
// Requires inline-block or block for proper styling
//
//============================================================
@mixin text-overflow {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}


//============================================================
//
// Image replacement
//
//============================================================
@mixin hide-text {
    background-color: transparent;
    border: 0;
    color: transparent;
    font: 0/0 a;
    text-shadow: none;
}


//============================================================
//
// Resize anything
//
// Parameters:
// @param [string] $direction: none|both|horizontal|vertical|initial|inherit
//
//============================================================
@mixin resizable($direction) {
    overflow: auto; // Safari fix
    resize: $direction;
}


//============================================================
//
// Hyphenation
//
// Parameters:
// @param [string] $mode: none|manual|auto
//
//============================================================
@mixin hyphens($mode: auto) {
	hyphens: $mode;
	word-wrap: break-word;
}


//============================================================
//
// Triangle
//
// Parameters:
// @param [string] $size: the size of the triangle
// @param [string] $direction: up|down|left|right
// @param [string] $color: Any colour option
//
//============================================================
@mixin triangle ($size: null, $direction: null, $color: currentColor) {
	@include size(0);
	
	@if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
		border-color: transparent;
		border-style: solid;
		border-width: $size / 2;
		
		@if $direction == up {
		    border-bottom-color: $color;
		
		}
		@else if $direction == right {
		    border-left-color: $color;
		
		}
		@else if $direction == down {
		    border-top-color: $color;
		
		}
		@else if $direction == left {
		    border-right-color: $color;
		}
	}
		
	@else if ($direction == up-right) or ($direction == up-left) {
		border-top: $size solid $color;
		
		@if $direction == up-right {
		    border-left: $size solid transparent;
		
		}
		@else if $direction == up-left {
		    border-right: $size solid transparent;
		}
	}
		
	@else if ($direction == down-right) or ($direction == down-left) {
		border-bottom: $size solid $color;
		
		@if $direction == down-right {
		    border-left: $size solid transparent;
		
		}
		@else if $direction == down-left {
		    border-right: $size solid transparent;
		}
	}
}


//============================================================
//
// Context
//
// Helps style an element depending on the parent
// Useful for feature detection
//
// Paramters:
// @param [string | list] $context
//
//============================================================
@mixin when-inside($context){
    #{$context} & {
        @content;
    }
}


//============================================================
//
// Qualifying an element
//
// Helps qualify a selector within its associated ruleset.
// Qualifying by prepending an element name.
//
// Paramters:
// @param [string] $element
//
//============================================================
@mixin when-is($element){
    @at-root #{$element + &} {
        @content;
    }
}


//============================================================
//
// Keyframes
//
// Outputs keyframes with suitable vendor prefixes
//
// Parameters:
// @param [string] $animation-name: The name of the animation
//
//============================================================
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}