/* -------------------------------------------------------------- 
	SASS Mixins
-------------------------------------------------------------- */

//============================================================
//
// Clearfix
// Adapted from: A new micro clearfix hack
//
//============================================================
@mixin clearfix {
    *zoom: 1;
    
    &:after {
        clear: both;
        content: "";
        display: table;
    }
}


//============================================================
//
// HIDPI-media-query 
//
// The HIDPI Meda Query will allow you to generate a media
// query that targes HIDPI devices.
// Find my device pixel ratio. Check out http://bjango.com/articles/min-device-pixel-ratio/
//
// Parameters:
// - Ratio: The device screen ratio. Default value set to 1.3 to target Google Nexus 7.
//
//============================================================
@mixin hidpi($ratio: 1.3) {
	@media only screen and (-webkit-min-device-pixel-ratio: $ratio),
    only screen and (min--moz-device-pixel-ratio: $ratio),
    only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
    only screen and (min-resolution: #{round($ratio*96)}dpi),
    only screen and (min-resolution: #{$ratio}dppx) {
    	@content;
	}
}


//============================================================
//
// Retina image
//
// The mixin uses a @2x.png retina filename.
// E.g. logo.png and logo@2x.png
//
// Parameters:
// - File path: The path to the file without the file extension. Place this in quotes ""
// - Width: The width of the image
// - Height: The height of the image
// - Extension: The default is .png, only add this parameter is if is different
//
//============================================================
@mixin retina-image($filepath, $width, $height, $extension: png) {
	background-image: url($filepath + '.' + $extension);
	background-repeat: no-repeat;
	height: $height;
	width: $width;
	
	@media only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and (-moz-min-device-pixel-ratio: 2),
	only screen and (-o-min-device-pixel-ratio: 2/1),
	only screen and (min-device-pixel-ratio: 2),
	only screen and (min-resolution: 192dpi),
	only screen and (min-resolution: 2dppx) {
		& {
			background-image: url($filepath + '@2x.' + $extension);
			background-size: $width $height;	
		}
	}
}


//============================================================
//
// Image Sprite
//
// Usage:
// 1. Create two folders in the graphics directory (for example 'icons' and 'icons-2x').
// 2. Create sprite images for pixel ratio 1 screens and put them in the first folder.
// 3. Create sprite images for pixel ratio 2 screens and put them in the second folder named with '-2x', use the same filenames (without '@2x' or '-2x').
//
// Parameters:
// - File name of the image
// - Variable for the pixel ratio 1 sprite
// - Variable for the pixel ratio 2 sprite (optional)
//
// Example:
// $icons: sprite-map("icons/*.png", $layout: smart);
// $icons-2x: sprite-map("icons-2x/*.png", $layout: smart);
//
// .icon_1 {
//     @include image-sprite('icon_1', $icons, $icons-2x);
// }
//
//
//============================================================
@mixin image-sprite($image, $sprite-map, $sprite-map-2x: '') {
    background-image: sprite-url($sprite-map);
    background-position: sprite-position($sprite-map, $image);
    background-repeat: no-repeat;
    display: block;
    height: image-height(sprite-file($sprite-map, $image));
    overflow: hidden;
    width: image-width(sprite-file($sprite-map, $image));

    @if( $sprite-map-2x != '' ){
        @media only screen and (-webkit-min-device-pixel-ratio: 2),
        	only screen and (-moz-min-device-pixel-ratio: 2),
        	only screen and (-o-min-device-pixel-ratio: 2/1),
        	only screen and (min-device-pixel-ratio: 2),
        	only screen and (min-resolution: 192dpi),
        	only screen and (min-resolution: 2dppx) {
                background-image: sprite-url($sprite-map-2x);
                background-position: round(nth(sprite-position($sprite-map-2x, $image), 1) / 2) round(nth(sprite-position($sprite-map-2x, $image), 2) / 2);
                background-size: (image-width(sprite-path($sprite-map-2x)) / 2) (image-height(sprite-path($sprite-map-2x)) / 2);
                height: image-height(sprite-file($sprite-map-2x, $image)) / 2;
                width: image-width(sprite-file($sprite-map-2x, $image)) / 2;
        }
    }
}


//============================================================
//
// SVG Image
//
// The mixin uses a @2x.png retina filename.
// This mixin depends on Modernizr to test for svg.
// E.g. logo.svg, logo.png and logo@2x.png
//
// Parameters:
// - File path: The path to the file without the file extension. Place this in quotes ""
// - Width: The width of the image
// - Height: The height of the image
// - Extension: The default is .png, only add this parameter is if is different
//
//============================================================
@mixin svg-image($filepath, $width, $height, $extension: png){
    background-image: url($filepath + '.svg');
    background-size: $width $height;
    
    .no-svg & {
        background-image: url($filepath + '.' + $extension);

        @media only screen and (-webkit-min-device-pixel-ratio: 2),
    	only screen and (-moz-min-device-pixel-ratio: 2),
    	only screen and (-o-min-device-pixel-ratio: 2/1),
    	only screen and (min-device-pixel-ratio: 2),
    	only screen and (min-resolution: 192dpi),
    	only screen and (min-resolution: 2dppx) {
    		& {
    			background-image: url($filepath + '@2x.' + $extension);	
    		}
    	}
    }
}


//============================================================
//
// Responsive image
//
// Keep images from scaling beyond the width of their parents.
//
// Parameters:
// - Display: the display type. Defaults to block
//
//============================================================
@mixin img-responsive($display: block) {
    display: $display;
    height: auto; // Scale the height according to the width, otherwise you get stretching
    max-width: 100%; // Set a maximum relative to the parent
}


//============================================================
//
// Font rem
//
// Adds in px and rem sizes
// Note: Keep rem after px on output
//
// Parameters:
// - Size: the rem font size - This is usually the px font size divided by 10 (e.g. 16px will be 1.6)
//
//============================================================
@mixin font-rem($size: 1.6) {
    font-size: ($size * 10) + px;
    font-size: $size + rem;
}


//============================================================
//
// Center-align a block level element
//
//============================================================
@mixin center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}


//============================================================
//
// Size shortcut
//
// Parameters:
// - Width: The width of the element
// - Height: The height of the element
//
//============================================================
@mixin size($width, $height: '') {
    
    @if( $height == '' ){
        height: $width;
        width: $width;
    }
    @else {
        height: $height;
        width: $width;
    }
	
}


//============================================================
//
// Text overflow
//
// Requires inline-block or block for proper styling
//
//============================================================
@mixin text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}


//============================================================
//
// CSS image replacement
//
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
//
//============================================================
@mixin hide-text($font: '~"0/0" a') {
    background-color: transparent;
    border: 0;
    color: transparent;
    font: $font;
    text-indent: -9999em;
    text-shadow: none;
}


//============================================================
//
// Resize anything
//
// Parameters:
//  - Direction: none|both|horizontal|vertical|initial|inherit
//
//============================================================
@mixin resizable($direction) {
    overflow: auto; // Safari fix
    resize: $direction;
}


//============================================================
//
// Optional hyphenation
//
// Parameters:
// - Mode: the CSS hyphens mode
//
//============================================================
@mixin hyphens($mode: auto) {
	-moz-hyphens: $mode;
	-ms-hyphens: $mode; // IE10+
	-o-hyphens: $mode;
	-webkit-hyphens: $mode;
	
	hyphens: $mode;
	word-wrap: break-word;
}


//============================================================
//
// Triangle
//
// Parameters:
// - Size: use px
// - Color: Any colour option
// - Direction: up|down|left|right
//
//============================================================
@mixin triangle ($size, $color, $direction) {
	height: 0;
	width: 0;
	
	@if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
		border-color: transparent;
		border-style: solid;
		border-width: $size / 2;
		
		@if $direction == up {
		    border-bottom-color: $color;
		
		}
		@else if $direction == right {
		    border-left-color: $color;
		
		}
		@else if $direction == down {
		    border-top-color: $color;
		
		}
		@else if $direction == left {
		    border-right-color: $color;
		}
	}
		
	@else if ($direction == up-right) or ($direction == up-left) {
		border-top: $size solid $color;
		
		@if $direction == up-right {
		    border-left: $size solid transparent;
		
		}
		@else if $direction == up-left {
		    border-right: $size solid transparent;
		}
	}
		
	@else if ($direction == down-right) or ($direction == down-left) {
		border-bottom: $size solid $color;
		
		@if $direction == down-right {
		    border-left: $size solid transparent;
		
		}
		@else if $direction == down-left {
		    border-right: $size solid transparent;
		}
	}
}


//============================================================
//
// User select
//
// Paramters:
// - Option: none | text | all | element
//
//============================================================
@mixin user-select($value){
    -moz-user-select: $value;
    -ms-user-select: $value;
    -webkit-user-select: $value;
    user-select: $value;
}


//============================================================
//
// Placeholder
//
// Usage
//
// input {
//     @include placeholder {
//         color: #f00
//     }
//     color: #000
// }
//
//============================================================
@mixin placeholder {
    &::-webkit-input-placeholder {@content}
    &:-moz-placeholder           {@content}
    &::-moz-placeholder          {@content}
    &:-ms-input-placeholder      {@content}  
}


//============================================================
//
// Opacity - With IE8 fallback
//
// Paramters:
// - value: 0 - 1
//
//============================================================
@mixin opacity($opacity){
    @if $opacity == 1 {
        filter: unquote("progid:DXImageTransform.Microsoft.Alpha(enabled=false)");
    }
    @else {
        filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
    }
    opacity: $opacity;
}


//============================================================
//
// px to em
//
// Converts pixel size to em
//
// Parameters:
// - pxval: The px value
// - base: Default is 16 (This can be left)
//
//============================================================
@function em($pxval, $base: 16) {
    @return ($pxval / $base) * 1em;
}