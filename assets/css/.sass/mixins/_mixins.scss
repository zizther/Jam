/* -------------------------------------------------------------- 
	SASS Mixins
-------------------------------------------------------------- */


//============================================================
//
// HIDPI-media-query 
//
// The HIDPI Meda Query will allow you to generate a media
// query that targes HIDPI devices.
// Default value set to 1.3 to target Google Nexus 7.
// Find my device pixel ratio. Check out http://bjango.com/articles/min-device-pixel-ratio/
//
//============================================================
@mixin hidpi($ratio: 1.3) {
	@media only screen and (-webkit-min-device-pixel-ratio: $ratio),
    only screen and (min--moz-device-pixel-ratio: $ratio),
    only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
    only screen and (min-resolution: #{round($ratio*96)}dpi),
    only screen and (min-resolution: #{$ratio}dppx) {
    	@content;
	}
}


//============================================================
//
// Retina image
//
// The mixin uses a @2x.png retina filename.
// Place $filepath in quotes (""), but not $width and $height as this will make browsers ignore background-size
// 
//
//============================================================
@mixin retina-image($filepath, $width, $height, $extension: png) {
	background-image: url($filepath + '.' + $extension);
	background-repeat: no-repeat;
	height: $height;
	width: $width;
	
	@media only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and (-moz-min-device-pixel-ratio: 2),
	only screen and (-o-min-device-pixel-ratio: 2/1),
	only screen and (min-device-pixel-ratio: 2),
	only screen and (min-resolution: 192dpi),
	only screen and (min-resolution: 2dppx) {
		& {
			background-image: url($filepath + '@2x.' + $extension);
			@include background-size($width $height);	
		}
	}
}


//============================================================
//
// Font rem
//
// Adds in px and rem sizes - $size should be 'rem'
// Keep rem after px on output
//
//============================================================
@mixin font-rem($size: 1.6) {
    font-size: ($size * 10) + px;
    font-size: $size + rem;
}


//============================================================
//
// Center-align a block level element
//
//============================================================
@mixin center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}


//============================================================
//
// Sizing shortcuts
//
//============================================================
@mixin size($width, $height) {
	height: $height;
    width: $width;
}
@mixin square($size) {
    @include size($size, $size);
}


//============================================================
//
// Text overflow
//
// Requires inline-block or block for proper styling
//
//============================================================
@mixin text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}


//============================================================
//
// CSS image replacement
//
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
//
//============================================================
@mixin hide-text($font: '~"0/0" a') {
    background-color: transparent;
    border: 0;
    color: transparent;
    font: $font;
    text-shadow: none;
}


//============================================================
//
// Resize anything
//
//============================================================
@mixin resizable($direction) {
    overflow: auto; // Safari fix
    resize: $direction; // Options: horizontal, vertical, both
}


//============================================================
//
// Optional hyphenation
//
//============================================================
@mixin hyphens($mode: auto) {
	hyphens: $mode;
	word-wrap: break-word;
	
	-moz-hyphens: $mode;
	-ms-hyphens: $mode; // IE10+
	-o-hyphens: $mode;
	-webkit-hyphens: $mode;
}


//============================================================
//
// Responsive image
//
// Keep images from scaling beyond the width of their parents.
//
//============================================================
@mixin img-responsive($display: block) {
    display: $display;
    height: auto; // Scale the height according to the width, otherwise you get stretching
    max-width: 100%; // Set a maximum relative to the parent
}


//============================================================
//
// Triangle
//
//============================================================
@mixin triangle ($size, $color, $direction) {
	height: 0;
	width: 0;
	
	@if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
		border-color: transparent;
		border-style: solid;
		border-width: $size / 2;
		
		@if $direction == up {
		    border-bottom-color: $color;
		
		}
		@else if $direction == right {
		    border-left-color: $color;
		
		}
		@else if $direction == down {
		    border-top-color: $color;
		
		}
		@else if $direction == left {
		    border-right-color: $color;
		}
	}
		
	@else if ($direction == up-right) or ($direction == up-left) {
		border-top: $size solid $color;
		
		@if $direction == up-right {
		    border-left: $size solid transparent;
		
		}
		@else if $direction == up-left {
		    border-right: $size solid transparent;
		}
	}
		
	@else if ($direction == down-right) or ($direction == down-left) {
		border-bottom: $size solid $color;
		
		@if $direction == down-right {
		    border-left: $size solid transparent;
		
		}
		@else if $direction == down-left {
		    border-right: $size solid transparent;
		}
	}
}


//============================================================
//
// px to em
//
// Converts pixel size to em
//
//============================================================
@function em($pxval, $base: 16) {
    @return ($pxval / $base) * 1em;
}