/* --------------------------------------------------------------
	Grid

	Example usage:

    <div class="row">
        <div class="col-xs-12 col-sm-8 col-md-6 col-lg-4">
            <div class="box"></div>
        </div>
    </div>
-------------------------------------------------------------- */
$gutter-compensation: $flexboxgrid-gutter-width * .5 * -1;
$half-gutter-width: $flexboxgrid-gutter-width * .5;

.row {
    box-sizing: border-box;
    display: flex;
    flex: 0, 1, auto;
    flex-direction: row;
    flex-wrap: wrap;
    margin-right: $gutter-compensation;
    margin-left: $gutter-compensation;

    &--reverse {
        flex-direction: row-reverse;
    }
}

.col {
    &--reverse {
        flex-direction: column-reverse;
    }
}


[class^="col-"],
[class*=" col-"] {
    box-sizing: border-box;

    // split @include flex(0, 0, auto) into individual props
    flex-grow: 0;
    flex-shrink: 0;

    // we leave @include flex-basis(auto) out of common because
    // in some spots we need it and some we dont
    // more why here: https://github.com/kristoferjoseph/flexboxgrid/issues/126

    padding-right: $half-gutter-width;
    padding-left: $half-gutter-width;
}

$name: xs;

.col-#{$name} {
    flex-basis: auto;
}
@for $i from 1 through $flexboxgrid-grid-columns {
    .col-#{$name}-#{$i} {
        flex-basis: 100% / $flexboxgrid-grid-columns * $i;
        max-width: 100% / $flexboxgrid-grid-columns * $i;
    }
}
@for $i from 0 through $flexboxgrid-grid-columns {
    .col-#{$name}-offset-#{$i} {
        @if $i == 0 {
            margin-left: 0;
        }
        @else {
            margin-left: 100% / $flexboxgrid-grid-columns * $i;
        }
    }
}

.col-#{$name} {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
}
.start-#{$name} {
    justify-content: flex-start;
    text-align: left;
}

.center-#{$name} {
    justify-content: center;
    text-align: center;
}

.end-#{$name} {
    justify-content: flex-end;
    text-align: right;
}

.top-#{$name} {
    align-items: flex-start;
}

.middle-#{$name} {
    align-items: center;
}

.bottom-#{$name} {
    align-items: flex-end;
}

.around-#{$name} {
    justify-content: space-around;
}

.between-#{$name} {
    justify-content: space-between;
}

.first-#{$name} {
    order: -1;
}

.last-#{$name} {
    order: 1;
}


@each $breakpoint in $flexboxgrid-breakpoints {
    $name: nth($breakpoint, 1);
    $size: nth($breakpoint, 2);
    $container: nth($breakpoint, 3);

    @media only screen and (min-width: $size) {
        .grid-container {
            width: $container;
        }

        .col-#{$name} {
            flex-basis: auto;
        }
        @for $i from 1 through $flexboxgrid-grid-columns {
            .col-#{$name}-#{$i} {
                flex-basis: 100% / $flexboxgrid-grid-columns * $i;
                max-width: 100% / $flexboxgrid-grid-columns * $i;
            }
        }
        @for $i from 0 through $flexboxgrid-grid-columns {
            .col-#{$name}-offset-#{$i} {
                @if $i == 0 {
                    margin-left: 0;
                } @else {
                    margin-left: 100% / $flexboxgrid-grid-columns * $i;
                }
            }
        }
        .col-#{$name} {
            flex-grow: 1;
            flex-basis: 0;
            max-width: 100%;
        }
        .start-#{$name} {
            justify-content: flex-start;
            text-align: left;
        }

        .center-#{$name} {
            justify-content: center;
            text-align: center;
        }

        .end-#{$name} {
            justify-content: flex-end;
            text-align: right;
        }

        .top-#{$name} {
            align-items: flex-start;
        }

        .middle-#{$name} {
            align-items: center;
        }

        .bottom-#{$name} {
            align-items: flex-end;
        }

        .around-#{$name} {
            justify-content: space-around;
        }

        .between-#{$name} {
            justify-content: space-between;
        }

        .first-#{$name} {
            order: -1;
        }

        .last-#{$name} {
            order: 1;
        }
    }
}
