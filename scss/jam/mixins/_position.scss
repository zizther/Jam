//============================================================
//
// Position
// A helper mixin for offset positioning
//
// Parameters:
// @param [string] $position: position
// @param [list] $args (()): offsets list
// ---
// Explanations
// 1. Output position
// 2. If `$args` is not empty
// 3. Loop other the 4 popular offsets (`$offsets`)
// 4. Check if the current one exists in `$args`
// 5. If it is found in `$args`
// 6. And if it is at last position
// 7. Set it to 0
// 8. Else if it is found at any other index
// 9. Store the next value from `$args`
// 10. If it is a valid length
// 11. Set the offset to this value
// 12. Else if it is another offset
// 13. Set the offset to 0
// 14. Else
// 15. Warn the user
//
//============================================================
@mixin position($position, $args: ()) {
    $offsets: top right bottom left;
    position: $position;

    @each $offset in $offsets {
        $index: index($args, $offset);

        @if $index {
            @if $index == length($args) {
                #{$offset}: 0;
            }
            @else {
                $next: nth($args, $index + 1);
                @if is-valid-length($next) {
                    #{$offset}: $next;
                }
                @else if index($offsets, $next) {
                    #{$offset}: 0;
                }
                @else {
                    @warn "Invalid value `#{$next}` for offset `#{$offset}`.";
                }
            }
        }
    }
}


// Function checking if $value is a valid length
//
// @param [literal] $value: value to test
//
// @return [bool]
//
@function is-valid-length($value) {
    @return (type-of($value) == "number" and not unitless($value)) or (index(auto initial inherit 0, $value) != false);
}

// Shorthands
//
// @param [list] $args (()): offsets list
//
@mixin absolute($args: ()) {
    @include position(absolute, $args);
}

@mixin fixed($args: ()) {
    @include position(fixed, $args);
}

@mixin relative($args: ()) {
    @include position(relative, $args);
}

@mixin sticky($args: ()) {
    @include position(sticky, $args);
}
